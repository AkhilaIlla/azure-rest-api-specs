{
    "swagger":"2.0",
    "info": {
      "version":"2022-09-01",
      "title":"Azure Maps Wayfinding Service",
      "description": "Azure Maps Wayfinding REST APIs"
    },
    "schemes": ["https"],
	"consumes": [],
	"produces": ["application/json"],
	"paths": {
		"/wayfinding/path": {
			"get": {
				"description": "**Applies to:** see [pricing tiers](https://aka.ms/AzureMapsPricingTier).\n\n Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. See the [Creator for indoor maps](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article for an introduction to the Azure Maps Creator concepts and tools.\n\nThe Wayfinding Service API is part of Creator. Wayfinding API adheres to the [Open Geospatial Consortium](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) standard and uses indoor maps data from the routeset to calculate the best path from one point in a facility to another.",
				"operationId": "wayfindingGetPath",
				"parameters": [
					{"$ref": "../../../Common/preview/1.0/common.json#/parameters/ClientId"},
					{"$ref": "#/parameters/SubscriptionKey"},
					{"$ref": "#/parameters/ApiVersion"},
					{"$ref": "#/parameters/RoutesetId"},
					{"$ref": "#/parameters/FacilityId"},
					{"$ref": "#/parameters/Query"},
					{"$ref": "#/parameters/Avoid"},
					{"$ref": "#/parameters/Width"}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": { "$ref": "#/definitions/WayfindResult" }
					  },
					  "400": { "description": "Bad request: one or more parameters were incorrectly specified or are mutually exclusive." },
					  "401": { "description": "Access denied due to invalid subscription key or invalid Azure Active Directory bearer token. Make sure to provide a valid key for an active Azure subscription and Maps resource. Otherwise, verify the [WWW-Authenticate](https://tools.ietf.org/html/rfc6750#section-3.1) header for error code and description of the provided AAD bearer token." },
					  "403": { "description": "Permission, capacity, or authentication issues." },
					  "404": { "description": "Not Found: the requested resource could not be found, but it may be available again in the future." },
					  "500": { "description": "An error occurred while processing the request. Please try again later." }
				}
			}
		}
	},	
	"securityDefinitions": {
		"AADToken": {
		  "type": "oauth2",
		  "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
		  "flow": "implicit",
		  "description": "These are the [Azure Active Directory OAuth2](https://docs.microsoft.com/azure/active-directory/develop/v1-overview) Flows. When paired with [Azure role-based access](https://docs.microsoft.com/azure/role-based-access-control/overview) control it can be used to control access to Azure Maps REST APIs. Azure role-based access controls are used to designate access to one or more Azure Maps resource account or sub-resources. Any user, group, or service principal can be granted access via a  built-in role or a custom role composed of one or more permissions to Azure Maps REST APIs.\n\nTo implement scenarios, we recommend viewing [authentication concepts](https://aka.ms/amauth). In summary, this security definition provides a solution for modeling application(s) via objects capable of access control on specific APIs and scopes.\n\n#### Notes\n* This security definition **requires** the use of the `x-ms-client-id` header to indicate which Azure Maps resource the application is requesting access to. This can be acquired from the [Maps management API](https://aka.ms/amauthdetails).\n* \nThe `Authorization URL` is specific to the Azure public cloud instance. Sovereign clouds have unique Authorization URLs and Azure Active directory configurations. \n* \nThe Azure role-based access control is configured from the [Azure management plane](https://aka.ms/amrbac) via Azure portal, PowerShell, CLI, Azure SDKs, or REST APIs.\n* \nUsage of the [Azure Maps Web SDK](https://aka.ms/amaadmc) allows for configuration based setup of an application for multiple use cases.\n* Currently, Azure Active Directory [v1.0 or v2.0](https://docs.microsoft.com/azure/active-directory/develop/azure-ad-endpoint-comparison) supports Work, School, and Guests but does not support Personal accounts.",
		  "scopes": {
			"https://atlas.microsoft.com/.default": "https://atlas.microsoft.com/.default"
		  }
		},
		"SharedKey": {
		  "type": "apiKey",
		  "description": "This is a shared key that is provisioned when creating an [Azure Maps resource](https://aka.ms/amauth) through the Azure management plane  via Azure portal, PowerShell, CLI, Azure SDKs, or REST APIs.\n\n With this key, any application is authorized to access  all REST APIs. In other words, these can currently be treated as master keys to the account which they are issued for.\n\n For publicly exposed applications, our recommendation is to use server-to-server access of Azure Maps REST APIs where this key can be securely stored.",
		  "name": "subscription-key",
		  "in": "query"
		},
		"SasToken": {
		  "type": "apiKey",
		  "description": "This is a shared access signature token is created from the List SAS operation on the [Azure Maps resource](https://aka.ms/amauth) through the Azure management plane via Azure portal, PowerShell, CLI, Azure SDKs, or REST APIs.\n\n With this token, any application is authorized to access with Azure role-based access controls and fine-grain control to the expiration, rate, and region(s) of use for the particular token. In other words, the SAS Token can be used to allow applications to control access in a more secured way than the shared key.\n\n For publicly exposed applications, our recommendation is to configure a specific list of allowed origins on the [Map account resource](https://aka.ms/amauth) to limit rendering abuse and regularly renew the SAS Token.",
		  "name": "SAS Token",
		  "in": "header"
		}
	},
	"security": [
		{ "AADToken": ["https://atlas.microsoft.com/.default"] },
		{ "SharedKey": [] },
		{ "SasToken": [] }
	],
	"parameters": {
		"ApiVersion": {
			"name": "api-version",
			"description": "Version number of Azure Maps API.",
			"type": "string",
			"in": "query",
			"required": true,
			"default": "2022-09-01",
			"x-ms-parameter-location": "client"
		},
		"RoutesetId": {
			"name": "routesetId",
			"description": "The identifier for the routeset to query from.",
			"type": "string",
			"in": "query",
			"required": true,
			"x-ms-parameter-location": "client"
		},
		"SubscriptionKey": {
			"name": "subscription-key",
			"description": "Used with Shared Key authentication which relies on passing an Azure Maps account generated subscription key with each request to Azure Maps. For more information, see [Authentication with Azure Maps](/azure/azure-maps/azure-maps-authentication#shared-key-authentication).",
			"type": "string",
			"in": "query",
			"required": true,
			"x-ms-parameter-location": "client"
		},
		"FacilityId": {
			"name": "facilityId",
			"type": "string",
			"in": "query",
			"description": "The identifier of the facility in which to search for the Wayfinding path.",
			"required": true,
			"x-ms-parameter-location": "client"
		},
		"Query": {
			"name": "query",
			"type": "string",
			"in": "query",
			"description": "The starting and end points of the route you are searching for in a facility. Each point is represented by its latitude, longitude and a level ordinal. The query format is as follows: {fromLat},{fromLon},{fromLevelOrdinal}:{toLat},{toLon},{toLevelOrdinal}.",
			"required": true,
			"x-ms-parameter-location": "client"
		},
		"Avoid": {
			"name": "avoid",
			"description": "(Optional) Use when you need to avoid using either elevators, escalators, or stairs in your route. Valid values are: 'elevator', 'escalator' and 'stair'. Multiple values can be selected.",			"type": "array",
			"items": { "type": "string" },
			"in": "query",
			"x-ms-parameter-location": "client"
		},
		"Width": {
			"name": "width",
			"description": "The minimum width (in meters) of openings within the building that can be used in a wayfinding route. For example, if you specified a width of 2.0, the calculated wayfinding path will be plotted along a route that avoids any opening less than 2.0 meters wide. The default width is 0.0.",			"type": "number",
			"in": "query",
			"x-ms-parameter-location": "client"
		}
	},
	"definitions": {
        "Point": {
			"type": "object",
			"properties": {
    	        "latitude": { "description": "the point latitude", "type": "number" },
            	"longitude": { "description": "the point longitude", "type": "number" }
			}
        },
        "LegSummary": {
            "description": "Summary object for a route leg.",
            "type":"object",
            "properties": {
                "travelMode": { "type": "string", "description": "The mode of travel can be walking (default), elevator, escalator or stairs."},
                "lengthInMeters": { "type": "number", "description": "The length, in meters, of this leg of the route."},
                "travelTimeInSeconds": { "type": "integer", "description": "The travel time, in seconds, for this leg of the route."},
                "startLevel": { "type": "integer", "description": "The floor where this leg of the route starts."},
                "endLevel": { "type": "integer", "description": "The floor where this leg of the route ends."}
            }
        },
        "RouteSummary": {
            "description": "Summary object for the route.[***DAVSTA*** How is route summary different from path summary?]",
            "type":"object",
            "properties": {
                "lengthInMeters": { "type": "number", "description": "The length, in meters, of the entire route."},
                "travelTimeInSeconds": { "type": "integer", "description": "The total amount of time, in seconds, to complete the entire route."}
            }
        },
        "Leg": {
            "description": "One section of the overall route.",
            "type": "object",
            "properties": {
                "summary": { "description": "The leg summary", "$ref": "#/definitions/LegSummary" },
                "points": { "description": "The leg shape points.[***DAVSTA*** We need to discuss] Their vertical position is determined as follows: all the points are at the same height when startLevel and endLevel are the same, otherwise the array will contain only two points: the first at startLevel and the second point is at endLevel.", "type": "array", "items": { "$ref": "#/definitions/Point" } }
            }
        },
		"Path": {
            "description": "***DAVSTA REVIEW: Question: How is route different from path? Why not use route instead of path for this property name?**** The directions given to travel between the start and end points.",
            "type": "object",
            "properties": {
                "summary": { "description": "The full path summary", "$ref": "#/definitions/RouteSummary" },
                "legs": { "description": "The different travel modes in this route.[***DAVSTA*** We need to discuss]", "type": "array", "items": { "$ref": "#/definitions/Leg" } }
            }
		},
		"WayfindResult": {
			"description": "The object returned when completing a successful Wayfinding call.",
			"type": "object",
			"properties": {
				"formatVersion": {
					"description": "The format version of the wayfinding object.[***DAVSTA*** We need to discuss]",
					"type": "string"
				},
				"paths": {
					"description": "An array of wayfinding results.[***DAVSTA*** We need to discuss - is this an array of legs of the route? Need to understand the difference between a route and a path]",
					"type": "array",
					"items": { "$ref": "#/definitions/Path" }
				}
			}
		}
	}
 }